import json
import sqlite3
import logging
import pytz
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    CommandHandler
)
from ex_owner import generate_otp, check_subscription
from utils import get_user_data, save_otp_data, save_user_data, get_admin_data, save_admin_data

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADMIN_STATE, ADD_PAIR, ADD_LOCATION, EDIT_RATES, SET_RATE, EDIT_PAIRS, EDIT_LOCATIONS, GENERATE_OTP, BROADCAST = range(9)

def build_admin_entry_menu():
    keyboard = [[InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É üîê", callback_data='enter_admin')]]
    return InlineKeyboardMarkup(keyboard)

def build_main_menu(user_id):
    from exbot import bot_config  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å—ã ‚öôÔ∏è", callback_data='edit_rates'),
         InlineKeyboardButton("–õ–æ–∫–∞—Ü–∏–∏ üåç", callback_data='edit_locations')],
        [InlineKeyboardButton("–ü–∞—Ä—ã üí±", callback_data='edit_pairs'),
         InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data='set_rate')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data='manage_location')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data='manage_pair')],
        [InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ üì©", callback_data='broadcast')],
        [InlineKeyboardButton("–í—ã—Ö–æ–¥ üö™", callback_data='exit')]
    ]
    active_order, request_count, referrer_id, in_admin_mode = get_user_data(user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è
    if str(user_id) == bot_config["owner_id"]:
        keyboard.insert(0, [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP", callback_data='generate_otp')])
        keyboard.insert(1, [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîç", callback_data='check_subscription')])
        keyboard.insert(2, [InlineKeyboardButton("–ú–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞ üîó", callback_data='generate_ref_link')])
        keyboard.insert(3, [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ üîÑ", callback_data='reload_config')])
    elif active_order and 'admin_expiry' in json.loads(active_order):
        keyboard.insert(0, [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîç", callback_data='check_subscription')])
        keyboard.insert(1, [InlineKeyboardButton("–ú–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞ üîó", callback_data='generate_ref_link')])
    return InlineKeyboardMarkup(keyboard)

def build_locations_menu(admin_id):
    admin_data = get_admin_data(admin_id)
    keyboard = [
        [InlineKeyboardButton(f"{loc} ‚úÖ" if loc in admin_data['active_locations'] else f"{loc} ‚ùå", callback_data=f"toggle_loc_{loc}")
         for loc in admin_data['locations'][i:i+2]]
        for i in range(0, len(admin_data['locations']), 2)
    ]
    keyboard.append([
        InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å üîÑ", callback_data='reset_locations'),
        InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ", callback_data='save_locations'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main')
    ])
    return InlineKeyboardMarkup(keyboard)

def build_pairs_menu(admin_id):
    admin_data = get_admin_data(admin_id)
    active_count = len(admin_data['active_pairs'])
    total_count = len(admin_data['pairs'])
    keyboard = [
        [InlineKeyboardButton(f"{pair} ‚úÖ" if pair in admin_data['active_pairs'] else f"{pair} ‚ùå", callback_data=f"toggle_pair_{pair}")]
        for pair in admin_data['pairs']
    ]
    keyboard.append([
        InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å üîÑ", callback_data='reset_pairs'),
        InlineKeyboardButton(f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ({active_count}/{total_count}) ‚úÖ", callback_data='save_pairs'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main')
    ])
    return InlineKeyboardMarkup(keyboard)

def build_rates_menu(admin_id):
    admin_data = get_admin_data(admin_id)
    keyboard = [
        [InlineKeyboardButton(f"{rate_key}: {rate_value:.2f}", callback_data=f"set_rate_{rate_key}")]
        for rate_key, rate_value in admin_data['rates'].items()
    ]
    keyboard.append([
        InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ", callback_data='save_rates'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main')
    ])
    return InlineKeyboardMarkup(keyboard)

async def add_location(update, context):
    user_id = update.message.from_user.id
    admin_id = user_id  # –ê–¥–º–∏–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    admin_data = get_admin_data(admin_id)

    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è admin_id={admin_id}")
    if not update.message:
        logger.error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ADMIN_STATE
    new_location = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{new_location}'")
    if not new_location:
        logger.info("–õ–æ–∫–∞—Ü–∏—è –ø—É—Å—Ç–∞—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–æ–∞.")
        return ADD_LOCATION
    if new_location in admin_data['active_locations']:
        logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{new_location}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await update.message.reply_text("–≠—Ç–∞ –ª–æ–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return ADMIN_STATE
    admin_data['locations'].append(new_location)
    admin_data['active_locations'].append(new_location)
    save_admin_data(admin_id, admin_data)
    logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{new_location}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è '{new_location}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
    return ADMIN_STATE

async def add_pair(update, context):
    user_id = update.message.from_user.id
    admin_id = user_id  # –ê–¥–º–∏–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    admin_data = get_admin_data(admin_id)

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è admin_id={admin_id}")
    new_pair_input = update.message.text.strip()
    if not new_pair_input:
        await update.message.reply_text("–ü–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –†—É–±–ª–∏ - –î–æ–ª–ª–∞—Ä—ã.")
        return ADD_PAIR
    
    new_pair = new_pair_input.replace('-', '‚Üí').replace('  ', ' ').strip()
    if new_pair in admin_data['active_pairs']:
        await update.message.reply_text("–≠—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return ADMIN_STATE
    
    try:
        admin_data['pairs'].append(new_pair)
        admin_data['active_pairs'].append(new_pair)
        admin_data['rates'][new_pair] = 1.0
        save_admin_data(admin_id, admin_data)
        logger.info(f"–ü–∞—Ä–∞ '{new_pair}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è admin_id={admin_id}")
        await update.message.reply_text(
            f"–ü–∞—Ä–∞ '{new_pair}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=build_main_menu(user_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã '{new_pair}' –¥–ª—è admin_id={admin_id}: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=build_main_menu(user_id)
        )
    
    return ADMIN_STATE

async def admin_callback(update, context):
    query = update.callback_query
    if not query:
        logger.error("–ù–µ—Ç callback_query –≤ update!")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    try:
        await query.answer()
        logger.info(f"Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω: user_id={query.from_user.id}, choice={query.data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –¥–ª—è user_id={query.from_user.id}: {str(e)}")
        return ConversationHandler.END

    choice = query.data
    user_id = query.from_user.id
    admin_id = user_id
    active_order, request_count, referrer_id, in_admin_mode = get_user_data(user_id)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: user_id={user_id}, in_admin_mode={in_admin_mode}, choice={choice}")

    from exbot import bot_config
    owner_id = bot_config["owner_id"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ –≤ –∞–¥–º–∏–Ω–∫–µ –∏ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∫–∏
    if choice != 'enter_admin' and not in_admin_mode:
        await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ –∞–¥–º–∏–Ω–∫—É —á–µ—Ä–µ–∑ '–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É'!")
        return ConversationHandler.END

    if choice == 'enter_admin':
        if str(user_id) != owner_id:
            if not active_order:
                await query.message.reply_text("–ë—Ä–æ, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
                return ConversationHandler.END
            try:
                active_order_dict = json.loads(active_order) if isinstance(active_order, str) else {}
                if not isinstance(active_order_dict, dict) or 'admin_expiry' not in active_order_dict:
                    await query.message.reply_text("–ë—Ä–æ, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
                    return ConversationHandler.END
                expiry = datetime.strptime(active_order_dict['admin_expiry'], '%Y-%m-%d %H:%M:%S').replace(tzinfo=pytz.UTC)
                if datetime.now(pytz.UTC) > expiry:
                    active_order_dict.pop('admin_expiry', None)
                    save_user_data(user_id, active_order_dict, referrer_id, in_admin_mode=0)
                    await query.message.reply_text("–ë—Ä–æ, —Ç–≤–æ—è –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!")
                    return ConversationHandler.END
            except (json.JSONDecodeError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ active_order –¥–ª—è user_id={user_id}: {str(e)}, active_order={active_order}")
                await query.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return ConversationHandler.END
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º in_admin_mode=1 –ø—Ä–∏ –≤—Ö–æ–¥–µ
        active_order_dict = json.loads(active_order) if active_order and isinstance(active_order, str) else {}
        save_user_data(user_id, active_order_dict, referrer_id, in_admin_mode=1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        _, _, _, in_admin_mode_check = get_user_data(user_id)
        logger.debug(f"–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: in_admin_mode={in_admin_mode_check}")
        if not in_admin_mode_check:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å in_admin_mode=1 –¥–ª—è user_id={user_id}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return ConversationHandler.END
        await query.message.reply_text(
            "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É...",
            reply_markup=ReplyKeyboardRemove()
        )
        reply_markup = build_main_menu(user_id)
        await query.message.reply_text(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return ADMIN_STATE

    elif choice == 'exit':
        active_order_dict = json.loads(active_order) if active_order and isinstance(active_order, str) else {}
        save_user_data(user_id, active_order_dict, referrer_id, in_admin_mode=0)
        from exbot import build_client_menu
        reply_markup = build_client_menu(user_id)
        await query.message.reply_text(
            bot_config["messages"]["welcome"].format(name=query.from_user.first_name),
            reply_markup=reply_markup
        )
        await query.message.delete()
        return ConversationHandler.END

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    elif choice == 'manage_location':
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_location')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='remove_location')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ª–æ–∫–∞—Ü–∏—è–º–∏?", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE

    elif choice == 'manage_pair':
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_pair')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='remove_pair')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ø–∞—Ä–∞–º–∏?", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE

    elif choice == 'add_location':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ì–æ–∞'):")
        return ADD_LOCATION

    elif choice == 'add_pair':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†—É–±–ª–∏ ‚Üí –î–æ–ª–ª–∞—Ä—ã'):")
        return ADD_PAIR

    elif choice == 'edit_rates':
        return await edit_rates_handler(update, context, admin_id)

    elif choice == 'edit_pairs':
        return await edit_pairs_handler(update, context, admin_id)

    elif choice == 'edit_locations':
        return await edit_locations_handler(update, context, admin_id)

    elif choice == 'set_rate':
        admin_data = get_admin_data(admin_id)
        rates_text = "\n".join([f"*{k}*: {v:.2f}" for k, v in admin_data['rates'].items()])
        reply_markup = build_rates_menu(admin_id)
        await query.edit_message_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n{rates_text}\n–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return SET_RATE

    elif choice == 'generate_otp':
        if str(user_id) != owner_id:
            await query.edit_message_text("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP!")
            return ADMIN_STATE
        keyboard = [
            [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='generate_otp_7')],
            [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='generate_otp_30')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è OTP:", reply_markup=reply_markup, parse_mode='Markdown')
        return GENERATE_OTP

    elif choice == 'generate_otp_7':
        if str(user_id) == owner_id:
            otp, expiry = generate_otp(7)
            save_otp_data(otp, None, expiry.strftime('%Y-%m-%d %H:%M:%S'), 7)
            await query.edit_message_text(
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OTP\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 7 –¥–Ω–µ–π\n–ö–æ–¥: `/otp {otp}`\n–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É.",
                reply_markup=build_main_menu(user_id),
                parse_mode='Markdown'
            )
        return ADMIN_STATE

    elif choice == 'generate_otp_30':
        if str(user_id) == owner_id:
            otp, expiry = generate_otp(30)
            save_otp_data(otp, None, expiry.strftime('%Y-%m-%d %H:%M:%S'), 30)
            await query.edit_message_text(
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OTP\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n–ö–æ–¥: `/otp {otp}`\n–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É.",
                reply_markup=build_main_menu(user_id),
                parse_mode='Markdown'
            )
        return ADMIN_STATE

    elif choice == 'check_subscription':
        await check_subscription(update, context)
        await query.message.reply_text("–í–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω–∫—É!", reply_markup=build_main_menu(user_id))
        return ADMIN_STATE

    elif choice == 'generate_ref_link':
        ref_link = f"https://t.me/goa_exchangeBot?start=ref_{user_id}"
        await query.edit_message_text(
            f'<a href="{ref_link}">–ú–æ–π –±–æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫</a>\n–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º!',
            reply_markup=build_main_menu(user_id),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        return ADMIN_STATE

    elif choice == 'broadcast':
        await query.edit_message_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º:")
        return BROADCAST

    elif choice == 'reload_config':
        from bot_config import load_config
        try:
            load_config()
            await query.edit_message_text("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}", reply_markup=build_main_menu(user_id))
        return ADMIN_STATE

    elif choice == 'back_to_main':
        reply_markup = build_main_menu(user_id)
        await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE

    elif choice.startswith('delete_pair_'):
        admin_data = get_admin_data(admin_id)
        pair_to_delete = choice.replace('delete_pair_', '')
        if pair_to_delete in admin_data['pairs']:
            admin_data['pairs'].remove(pair_to_delete)
            if pair_to_delete in admin_data['active_pairs']:
                admin_data['active_pairs'].remove(pair_to_delete)
            if pair_to_delete in admin_data['rates']:
                del admin_data['rates'][pair_to_delete]
            save_admin_data(admin_id, admin_data)
            await query.edit_message_text(f"–ü–∞—Ä–∞ '{pair_to_delete}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
        else:
            await query.edit_message_text("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
        return ADMIN_STATE

    elif choice.startswith('delete_location_'):
        admin_data = get_admin_data(admin_id)
        location_to_delete = choice.replace('delete_location_', '')
        if location_to_delete in admin_data['locations']:
            admin_data['locations'].remove(location_to_delete)
            if location_to_delete in admin_data['active_locations']:
                admin_data['active_locations'].remove(location_to_delete)
            save_admin_data(admin_id, admin_data)
            await query.edit_message_text(f"–õ–æ–∫–∞—Ü–∏—è '{location_to_delete}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
        else:
            await query.edit_message_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=build_main_menu(user_id))
        return ADMIN_STATE

    elif choice == 'remove_pair':
        admin_data = get_admin_data(admin_id)
        if not admin_data['pairs']:
            await query.edit_message_text("–ù–µ—Ç –ø–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=build_main_menu(user_id))
            return ADMIN_STATE
        keyboard = [
            [InlineKeyboardButton(pair, callback_data=f'delete_pair_{pair}') for pair in admin_data['pairs'][i:i+2]]
            for i in range(0, len(admin_data['pairs']), 2)
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup, parse_mode='Markdown')
        return EDIT_PAIRS

    elif choice == 'remove_location':
        admin_data = get_admin_data(admin_id)
        if not admin_data['locations']:
            await query.edit_message_text("–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=build_main_menu(user_id))
            return ADMIN_STATE
        keyboard = [
            [InlineKeyboardButton(loc, callback_data=f'delete_location_{loc}') for loc in admin_data['locations'][i:i+2]]
            for i in range(0, len(admin_data['locations']), 2)
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup, parse_mode='Markdown')
        return EDIT_LOCATIONS

    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π choice: {choice}")
    return ADMIN_STATE

async def edit_rates_handler(update, context, admin_id):
    query = update.callback_query
    try:
        await query.answer()
        logger.info(f"edit_rates_handler: –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user_id={admin_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –≤ edit_rates_handler –¥–ª—è user_id={admin_id}: {str(e)}")
        return ConversationHandler.END

    try:
        admin_data = get_admin_data(admin_id)
        logger.info(f"admin_data['rates'] –¥–ª—è user_id={admin_id}: {admin_data['rates']}")
        rates_text = "\n".join([f"*{k}*: {v:.2f}" for k, v in admin_data['rates'].items()])
        reply_markup = build_rates_menu(admin_id)
        await query.message.reply_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n{rates_text}\n–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={admin_id}")
        return EDIT_RATES
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_rates_handler –¥–ª—è user_id={admin_id}: {str(e)}")
        try:
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                reply_markup=build_main_menu(admin_id)
            )
        except Exception as reply_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è user_id={admin_id}: {str(reply_error)}")
        return ADMIN_STATE

async def rates_callback(update, context):
    query = update.callback_query
    await query.answer()
    choice = query.data
    admin_id = query.from_user.id
    logger.info(f"rates_callback: choice={choice}, user_id={admin_id}")

    if choice.startswith('set_rate_'):
        rate_key = choice.replace('set_rate_', '')
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {rate_key}")
        admin_data = get_admin_data(admin_id)
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –≤ rates: {list(admin_data['rates'].keys())}")
        if rate_key not in admin_data['rates']:
            logger.error(f"–ü–∞—Ä–∞ {rate_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ rates!")
            await query.message.reply_text(
                f"–û—à–∏–±–∫–∞: –ø–∞—Ä–∞ *{rate_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                reply_markup=build_rates_menu(admin_id),
                parse_mode='Markdown'
            )
            return EDIT_RATES
        try:
            context.user_data['editing_rate'] = rate_key
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω editing_rate: {context.user_data['editing_rate']}")
            await query.message.reply_text(
                f"–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã *{rate_key}* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.85):",
                parse_mode='Markdown'
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {rate_key}")
            return SET_RATE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä—ã {rate_key}: {str(e)}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                reply_markup=build_main_menu(admin_id)
            )
            return ADMIN_STATE
    elif choice == 'save_rates':
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤")
        await query.message.reply_text("‚úÖ –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        reply_markup = build_main_menu(admin_id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    elif choice == 'back_to_main':
        logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        reply_markup = build_main_menu(admin_id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π choice –≤ rates_callback: {choice}")
    return EDIT_RATES

async def set_rate(update, context):
    user_id = update.message.from_user.id
    admin_id = user_id
    admin_data = get_admin_data(admin_id)

    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –¥–ª—è user_id={user_id}, editing_rate={context.user_data.get('editing_rate')}")

    try:
        new_rate_input = update.message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥: '{new_rate_input}'")
        new_rate = float(new_rate_input)
        if new_rate <= 0:
            logger.info("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å (<= 0)")
            await update.message.reply_text("–ë—Ä–æ, –∫—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return SET_RATE
        
        rate_key = context.user_data.get('editing_rate')
        if rate_key:
            admin_data['rates'][rate_key] = new_rate
            save_admin_data(admin_id, admin_data)
            logger.info(f"–ö—É—Ä—Å –¥–ª—è '{rate_key}' –æ–±–Ω–æ–≤–ª—ë–Ω: {new_rate}")
            rates_text = "\n".join([f"*{k}*: {v:.2f}" for k, v in admin_data['rates'].items()])
            reply_markup = build_rates_menu(admin_id)
            await update.message.reply_text(
                f"‚úÖ –ö—É—Ä—Å –¥–ª—è *{rate_key}* –æ–±–Ω–æ–≤–ª—ë–Ω!\nüìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n{rates_text}\n–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            context.user_data.pop('editing_rate', None)
            return EDIT_RATES
        else:
            logger.error("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                reply_markup=build_rates_menu(admin_id)
            )
            return EDIT_RATES
    except ValueError:
        logger.info("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞")
        await update.message.reply_text(
            "–ë—Ä–æ, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.85)! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            reply_markup=build_rates_menu(admin_id)
        )
        return SET_RATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_rate: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            reply_markup=build_main_menu(user_id)
        )
        return ADMIN_STATE

async def edit_pairs_handler(update, context, admin_id):
    query = update.callback_query
    await query.answer()
    admin_data = get_admin_data(admin_id)
    active_pairs = [str(pair) for pair in admin_data['active_pairs']]
    pairs_text = ", ".join(active_pairs) if active_pairs else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    reply_markup = build_pairs_menu(admin_id)
    await query.message.reply_text(
        f"üí± –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return EDIT_PAIRS

async def pairs_callback(update, context):
    query = update.callback_query
    await query.answer()
    choice = query.data
    admin_id = query.from_user.id
    admin_data = get_admin_data(admin_id)

    if choice == 'reset_pairs':
        admin_data['active_pairs'] = []
        save_admin_data(admin_id, admin_data)
        active_pairs = [str(pair) for pair in admin_data['active_pairs']]
        pairs_text = "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        reply_markup = build_pairs_menu(admin_id)
        await query.message.edit_text(
            f"üí± –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_PAIRS
    elif choice.startswith('toggle_pair_'):
        pair = choice.replace('toggle_pair_', '')
        if pair in admin_data['active_pairs']:
            admin_data['active_pairs'].remove(pair)
        else:
            admin_data['active_pairs'].append(pair)
        save_admin_data(admin_id, admin_data)
        active_pairs = [str(pair) for pair in admin_data['active_pairs']]
        pairs_text = ", ".join(active_pairs) if active_pairs else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        reply_markup = build_pairs_menu(admin_id)
        await query.message.edit_text(
            f"üí± –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_PAIRS
    elif choice == 'save_pairs':
        active_pairs = [str(pair) for pair in admin_data['active_pairs']]
        await query.message.reply_text(f"‚úÖ –ü–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(active_pairs) if active_pairs else '–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}")
        reply_markup = build_main_menu(query.from_user.id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    elif choice == 'back_to_main':
        reply_markup = build_main_menu(query.from_user.id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    return EDIT_PAIRS

async def edit_locations_handler(update, context, admin_id):
    query = update.callback_query
    await query.answer()
    admin_data = get_admin_data(admin_id)
    active_locations = [str(loc) for loc in admin_data['active_locations']]
    locations_text = ", ".join(active_locations) if active_locations else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    reply_markup = build_locations_menu(admin_id)
    await query.message.reply_text(
        f"üåç –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏: {locations_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return EDIT_LOCATIONS

async def locations_callback(update, context):
    query = update.callback_query
    await query.answer()
    choice = query.data
    admin_id = query.from_user.id
    admin_data = get_admin_data(admin_id)

    if choice == 'reset_locations':
        admin_data['active_locations'] = []
        save_admin_data(admin_id, admin_data)
        active_locations = [str(loc) for loc in admin_data['active_locations']]
        locations_text = "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        reply_markup = build_locations_menu(admin_id)
        await query.message.edit_text(
            f"üåç –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏: {locations_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_LOCATIONS
    elif choice.startswith('toggle_loc_'):
        location = choice.replace('toggle_loc_', '')
        if location in admin_data['active_locations']:
            admin_data['active_locations'].remove(location)
        else:
            admin_data['active_locations'].append(location)
        save_admin_data(admin_id, admin_data)
        active_locations = [str(loc) for loc in admin_data['active_locations']]
        locations_text = ", ".join(active_locations) if active_locations else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        reply_markup = build_locations_menu(admin_id)
        await query.message.edit_text(
            f"üåç –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏: {locations_text}\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_LOCATIONS
    elif choice == 'save_locations':
        active_locations = [str(loc) for loc in admin_data['active_locations']]
        await query.message.reply_text(f"‚úÖ –õ–æ–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(active_locations)}")
        reply_markup = build_main_menu(query.from_user.id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    elif choice == 'back_to_main':
        reply_markup = build_main_menu(query.from_user.id)
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=reply_markup, parse_mode='Markdown')
        return ADMIN_STATE
    return EDIT_LOCATIONS

async def broadcast_message(update, context):
    user_id = update.message.from_user.id  # ID –∞–¥–º–∏–Ω–∞
    message_text = update.message.text.strip()

    if not message_text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return BROADCAST

    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE referrer_id = ?', (user_id,))
    clients = c.fetchall()
    conn.close()

    if not clients:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=build_main_menu(user_id))
        return ADMIN_STATE

    sent_count = 0
    for client in clients:
        client_id = client[0]
        try:
            await context.bot.send_message(chat_id=client_id, text=message_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {str(e)}")

    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∫–ª–∏–µ–Ω—Ç–∞–º.",
        reply_markup=build_main_menu(user_id)
    )
    return ADMIN_STATE

def get_admin_handler(cancel_func):
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_callback, pattern='^enter_admin$'),
            CallbackQueryHandler(admin_callback),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö callback'–æ–≤
        ],
        states={
            ADMIN_STATE: [
                CallbackQueryHandler(admin_callback)
            ],
            ADD_LOCATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_location)
            ],
            ADD_PAIR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_pair)
            ],
            EDIT_RATES: [
                CallbackQueryHandler(rates_callback, pattern='^(save_rates|back_to_main)')
            ],
            SET_RATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_rate),
                CallbackQueryHandler(rates_callback, pattern='^(set_rate_|save_rates|back_to_main)')
            ],
            EDIT_PAIRS: [
                CallbackQueryHandler(pairs_callback, pattern='^(reset_pairs|toggle_pair_|save_pairs|back_to_main)'),
                CallbackQueryHandler(admin_callback, pattern='^(remove_pair|delete_pair_)')
            ],
            EDIT_LOCATIONS: [
                CallbackQueryHandler(locations_callback, pattern='^(reset_locations|toggle_loc_|save_locations|back_to_main)'),
                CallbackQueryHandler(admin_callback, pattern='^(remove_location|delete_location_)')
            ],
            GENERATE_OTP: [
                CallbackQueryHandler(admin_callback, pattern='^(generate_otp_7|generate_otp_30)')
            ],
            BROADCAST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_func)],
        per_message=False  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    )
